/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ingress.proto */

#ifndef PROTOBUF_C_ingress_2eproto__INCLUDED
#define PROTOBUF_C_ingress_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Ingress__TagItem Ingress__TagItem;
typedef struct _Ingress__TagRule Ingress__TagRule;
typedef struct _Ingress__TagRouter Ingress__TagRouter;
typedef struct _Ingress__PathRouter Ingress__PathRouter;
typedef struct _Ingress__HostRouter Ingress__HostRouter;
typedef struct _Ingress__AppnameRouter Ingress__AppnameRouter;
typedef struct _Ingress__APIRouter Ingress__APIRouter;
typedef struct _Ingress__Router Ingress__Router;
typedef struct _Ingress__Timeout Ingress__Timeout;
typedef struct _Ingress__Upstream Ingress__Upstream;
typedef struct _Ingress__Metadata Ingress__Metadata;
typedef struct _Ingress__VirtualService Ingress__VirtualService;
typedef struct _Ingress__Config Ingress__Config;


/* --- enums --- */

typedef enum _Ingress__LocationType {
  /*
   * Tag from http header
   */
  INGRESS__LOCATION_TYPE__LocHttpHeader = 0,
  /*
   * Tag from http query (not supported yet)
   */
  INGRESS__LOCATION_TYPE__LocHttpQuery = 1,
  /*
   * Tag from nginx var (not supported yet)
   */
  INGRESS__LOCATION_TYPE__LocNginxVar = 2,
  /*
   * Tag from x-biz-info (not supported yet)
   */
  INGRESS__LOCATION_TYPE__LocXBizInfo = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INGRESS__LOCATION_TYPE)
} Ingress__LocationType;
typedef enum _Ingress__MatchType {
  /*
   * String matches exactly
   */
  INGRESS__MATCH_TYPE__WholeMatch = 0,
  /*
   * Prefix matching (not supported yet)
   */
  INGRESS__MATCH_TYPE__PrefixMatch = 1,
  /*
   * Suffix matching (not supported yet)
   */
  INGRESS__MATCH_TYPE__SuffixMatch = 2,
  /*
   * Regex matching (not supported yet)
   */
  INGRESS__MATCH_TYPE__RegMatch = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INGRESS__MATCH_TYPE)
} Ingress__MatchType;

/* --- messages --- */

struct  _Ingress__TagItem
{
  ProtobufCMessage base;
  /*
   * which location to get the Tag
   */
  protobuf_c_boolean has_location;
  Ingress__LocationType location;
  /*
   * The name of the key to be parsed
   */
  char *key;
  /*
   * The name of the value to be parsed
   */
  char *value;
  /*
   * matching method
   */
  protobuf_c_boolean has_match_type;
  Ingress__MatchType match_type;
};
#define INGRESS__TAG_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ingress__tag_item__descriptor) \
    , 0, INGRESS__LOCATION_TYPE__LocHttpHeader, NULL, NULL, 0, INGRESS__MATCH_TYPE__WholeMatch }


struct  _Ingress__TagRule
{
  ProtobufCMessage base;
  /*
   * 'and' condition
   */
  size_t n_items;
  Ingress__TagItem **items;
};
#define INGRESS__TAG_RULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ingress__tag_rule__descriptor) \
    , 0,NULL }


struct  _Ingress__TagRouter
{
  ProtobufCMessage base;
  char *service_name;
  /*
   * 'or' condition
   */
  size_t n_rules;
  Ingress__TagRule **rules;
};
#define INGRESS__TAG_ROUTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ingress__tag_router__descriptor) \
    , NULL, 0,NULL }


struct  _Ingress__PathRouter
{
  ProtobufCMessage base;
  char *prefix;
  char *service_name;
  size_t n_tags;
  Ingress__TagRouter **tags;
};
#define INGRESS__PATH_ROUTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ingress__path_router__descriptor) \
    , NULL, NULL, 0,NULL }


struct  _Ingress__HostRouter
{
  ProtobufCMessage base;
  char *host;
  char *service_name;
  size_t n_paths;
  Ingress__PathRouter **paths;
  size_t n_tags;
  Ingress__TagRouter **tags;
};
#define INGRESS__HOST_ROUTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ingress__host_router__descriptor) \
    , NULL, NULL, 0,NULL, 0,NULL }


struct  _Ingress__AppnameRouter
{
  ProtobufCMessage base;
  char *appname;
  char *service_name;
  size_t n_tags;
  Ingress__TagRouter **tags;
};
#define INGRESS__APPNAME_ROUTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ingress__appname_router__descriptor) \
    , NULL, NULL, 0,NULL }


struct  _Ingress__APIRouter
{
  ProtobufCMessage base;
  char *service_name;
  char *api;
  size_t n_tags;
  Ingress__TagRouter **tags;
};
#define INGRESS__APIROUTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ingress__apirouter__descriptor) \
    , NULL, NULL, 0,NULL }


struct  _Ingress__Router
{
  ProtobufCMessage base;
  Ingress__HostRouter *host_router;
  Ingress__AppnameRouter *appname_router;
  Ingress__APIRouter *api_router;
};
#define INGRESS__ROUTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ingress__router__descriptor) \
    , NULL, NULL, NULL }


struct  _Ingress__Timeout
{
  ProtobufCMessage base;
  protobuf_c_boolean has_connect_timeout;
  uint32_t connect_timeout;
  protobuf_c_boolean has_read_timeout;
  uint32_t read_timeout;
  protobuf_c_boolean has_write_timeout;
  uint32_t write_timeout;
};
#define INGRESS__TIMEOUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ingress__timeout__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _Ingress__Upstream
{
  ProtobufCMessage base;
  char *target;
  protobuf_c_boolean has_weight;
  uint32_t weight;
};
#define INGRESS__UPSTREAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ingress__upstream__descriptor) \
    , NULL, 0, 0 }


struct  _Ingress__Metadata
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define INGRESS__METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ingress__metadata__descriptor) \
    , NULL, NULL }


struct  _Ingress__VirtualService
{
  ProtobufCMessage base;
  char *service_name;
  size_t n_upstreams;
  Ingress__Upstream **upstreams;
  Ingress__Timeout *timeout_ms;
  protobuf_c_boolean has_force_https;
  protobuf_c_boolean force_https;
  size_t n_metadata;
  Ingress__Metadata **metadata;
};
#define INGRESS__VIRTUAL_SERVICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ingress__virtual_service__descriptor) \
    , NULL, 0,NULL, NULL, 0, 0, 0,NULL }


struct  _Ingress__Config
{
  ProtobufCMessage base;
  size_t n_routers;
  Ingress__Router **routers;
  size_t n_services;
  Ingress__VirtualService **services;
};
#define INGRESS__CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ingress__config__descriptor) \
    , 0,NULL, 0,NULL }


/* Ingress__TagItem methods */
void   ingress__tag_item__init
                     (Ingress__TagItem         *message);
size_t ingress__tag_item__get_packed_size
                     (const Ingress__TagItem   *message);
size_t ingress__tag_item__pack
                     (const Ingress__TagItem   *message,
                      uint8_t             *out);
size_t ingress__tag_item__pack_to_buffer
                     (const Ingress__TagItem   *message,
                      ProtobufCBuffer     *buffer);
Ingress__TagItem *
       ingress__tag_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ingress__tag_item__free_unpacked
                     (Ingress__TagItem *message,
                      ProtobufCAllocator *allocator);
/* Ingress__TagRule methods */
void   ingress__tag_rule__init
                     (Ingress__TagRule         *message);
size_t ingress__tag_rule__get_packed_size
                     (const Ingress__TagRule   *message);
size_t ingress__tag_rule__pack
                     (const Ingress__TagRule   *message,
                      uint8_t             *out);
size_t ingress__tag_rule__pack_to_buffer
                     (const Ingress__TagRule   *message,
                      ProtobufCBuffer     *buffer);
Ingress__TagRule *
       ingress__tag_rule__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ingress__tag_rule__free_unpacked
                     (Ingress__TagRule *message,
                      ProtobufCAllocator *allocator);
/* Ingress__TagRouter methods */
void   ingress__tag_router__init
                     (Ingress__TagRouter         *message);
size_t ingress__tag_router__get_packed_size
                     (const Ingress__TagRouter   *message);
size_t ingress__tag_router__pack
                     (const Ingress__TagRouter   *message,
                      uint8_t             *out);
size_t ingress__tag_router__pack_to_buffer
                     (const Ingress__TagRouter   *message,
                      ProtobufCBuffer     *buffer);
Ingress__TagRouter *
       ingress__tag_router__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ingress__tag_router__free_unpacked
                     (Ingress__TagRouter *message,
                      ProtobufCAllocator *allocator);
/* Ingress__PathRouter methods */
void   ingress__path_router__init
                     (Ingress__PathRouter         *message);
size_t ingress__path_router__get_packed_size
                     (const Ingress__PathRouter   *message);
size_t ingress__path_router__pack
                     (const Ingress__PathRouter   *message,
                      uint8_t             *out);
size_t ingress__path_router__pack_to_buffer
                     (const Ingress__PathRouter   *message,
                      ProtobufCBuffer     *buffer);
Ingress__PathRouter *
       ingress__path_router__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ingress__path_router__free_unpacked
                     (Ingress__PathRouter *message,
                      ProtobufCAllocator *allocator);
/* Ingress__HostRouter methods */
void   ingress__host_router__init
                     (Ingress__HostRouter         *message);
size_t ingress__host_router__get_packed_size
                     (const Ingress__HostRouter   *message);
size_t ingress__host_router__pack
                     (const Ingress__HostRouter   *message,
                      uint8_t             *out);
size_t ingress__host_router__pack_to_buffer
                     (const Ingress__HostRouter   *message,
                      ProtobufCBuffer     *buffer);
Ingress__HostRouter *
       ingress__host_router__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ingress__host_router__free_unpacked
                     (Ingress__HostRouter *message,
                      ProtobufCAllocator *allocator);
/* Ingress__AppnameRouter methods */
void   ingress__appname_router__init
                     (Ingress__AppnameRouter         *message);
size_t ingress__appname_router__get_packed_size
                     (const Ingress__AppnameRouter   *message);
size_t ingress__appname_router__pack
                     (const Ingress__AppnameRouter   *message,
                      uint8_t             *out);
size_t ingress__appname_router__pack_to_buffer
                     (const Ingress__AppnameRouter   *message,
                      ProtobufCBuffer     *buffer);
Ingress__AppnameRouter *
       ingress__appname_router__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ingress__appname_router__free_unpacked
                     (Ingress__AppnameRouter *message,
                      ProtobufCAllocator *allocator);
/* Ingress__APIRouter methods */
void   ingress__apirouter__init
                     (Ingress__APIRouter         *message);
size_t ingress__apirouter__get_packed_size
                     (const Ingress__APIRouter   *message);
size_t ingress__apirouter__pack
                     (const Ingress__APIRouter   *message,
                      uint8_t             *out);
size_t ingress__apirouter__pack_to_buffer
                     (const Ingress__APIRouter   *message,
                      ProtobufCBuffer     *buffer);
Ingress__APIRouter *
       ingress__apirouter__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ingress__apirouter__free_unpacked
                     (Ingress__APIRouter *message,
                      ProtobufCAllocator *allocator);
/* Ingress__Router methods */
void   ingress__router__init
                     (Ingress__Router         *message);
size_t ingress__router__get_packed_size
                     (const Ingress__Router   *message);
size_t ingress__router__pack
                     (const Ingress__Router   *message,
                      uint8_t             *out);
size_t ingress__router__pack_to_buffer
                     (const Ingress__Router   *message,
                      ProtobufCBuffer     *buffer);
Ingress__Router *
       ingress__router__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ingress__router__free_unpacked
                     (Ingress__Router *message,
                      ProtobufCAllocator *allocator);
/* Ingress__Timeout methods */
void   ingress__timeout__init
                     (Ingress__Timeout         *message);
size_t ingress__timeout__get_packed_size
                     (const Ingress__Timeout   *message);
size_t ingress__timeout__pack
                     (const Ingress__Timeout   *message,
                      uint8_t             *out);
size_t ingress__timeout__pack_to_buffer
                     (const Ingress__Timeout   *message,
                      ProtobufCBuffer     *buffer);
Ingress__Timeout *
       ingress__timeout__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ingress__timeout__free_unpacked
                     (Ingress__Timeout *message,
                      ProtobufCAllocator *allocator);
/* Ingress__Upstream methods */
void   ingress__upstream__init
                     (Ingress__Upstream         *message);
size_t ingress__upstream__get_packed_size
                     (const Ingress__Upstream   *message);
size_t ingress__upstream__pack
                     (const Ingress__Upstream   *message,
                      uint8_t             *out);
size_t ingress__upstream__pack_to_buffer
                     (const Ingress__Upstream   *message,
                      ProtobufCBuffer     *buffer);
Ingress__Upstream *
       ingress__upstream__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ingress__upstream__free_unpacked
                     (Ingress__Upstream *message,
                      ProtobufCAllocator *allocator);
/* Ingress__Metadata methods */
void   ingress__metadata__init
                     (Ingress__Metadata         *message);
size_t ingress__metadata__get_packed_size
                     (const Ingress__Metadata   *message);
size_t ingress__metadata__pack
                     (const Ingress__Metadata   *message,
                      uint8_t             *out);
size_t ingress__metadata__pack_to_buffer
                     (const Ingress__Metadata   *message,
                      ProtobufCBuffer     *buffer);
Ingress__Metadata *
       ingress__metadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ingress__metadata__free_unpacked
                     (Ingress__Metadata *message,
                      ProtobufCAllocator *allocator);
/* Ingress__VirtualService methods */
void   ingress__virtual_service__init
                     (Ingress__VirtualService         *message);
size_t ingress__virtual_service__get_packed_size
                     (const Ingress__VirtualService   *message);
size_t ingress__virtual_service__pack
                     (const Ingress__VirtualService   *message,
                      uint8_t             *out);
size_t ingress__virtual_service__pack_to_buffer
                     (const Ingress__VirtualService   *message,
                      ProtobufCBuffer     *buffer);
Ingress__VirtualService *
       ingress__virtual_service__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ingress__virtual_service__free_unpacked
                     (Ingress__VirtualService *message,
                      ProtobufCAllocator *allocator);
/* Ingress__Config methods */
void   ingress__config__init
                     (Ingress__Config         *message);
size_t ingress__config__get_packed_size
                     (const Ingress__Config   *message);
size_t ingress__config__pack
                     (const Ingress__Config   *message,
                      uint8_t             *out);
size_t ingress__config__pack_to_buffer
                     (const Ingress__Config   *message,
                      ProtobufCBuffer     *buffer);
Ingress__Config *
       ingress__config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ingress__config__free_unpacked
                     (Ingress__Config *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ingress__TagItem_Closure)
                 (const Ingress__TagItem *message,
                  void *closure_data);
typedef void (*Ingress__TagRule_Closure)
                 (const Ingress__TagRule *message,
                  void *closure_data);
typedef void (*Ingress__TagRouter_Closure)
                 (const Ingress__TagRouter *message,
                  void *closure_data);
typedef void (*Ingress__PathRouter_Closure)
                 (const Ingress__PathRouter *message,
                  void *closure_data);
typedef void (*Ingress__HostRouter_Closure)
                 (const Ingress__HostRouter *message,
                  void *closure_data);
typedef void (*Ingress__AppnameRouter_Closure)
                 (const Ingress__AppnameRouter *message,
                  void *closure_data);
typedef void (*Ingress__APIRouter_Closure)
                 (const Ingress__APIRouter *message,
                  void *closure_data);
typedef void (*Ingress__Router_Closure)
                 (const Ingress__Router *message,
                  void *closure_data);
typedef void (*Ingress__Timeout_Closure)
                 (const Ingress__Timeout *message,
                  void *closure_data);
typedef void (*Ingress__Upstream_Closure)
                 (const Ingress__Upstream *message,
                  void *closure_data);
typedef void (*Ingress__Metadata_Closure)
                 (const Ingress__Metadata *message,
                  void *closure_data);
typedef void (*Ingress__VirtualService_Closure)
                 (const Ingress__VirtualService *message,
                  void *closure_data);
typedef void (*Ingress__Config_Closure)
                 (const Ingress__Config *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ingress__location_type__descriptor;
extern const ProtobufCEnumDescriptor    ingress__match_type__descriptor;
extern const ProtobufCMessageDescriptor ingress__tag_item__descriptor;
extern const ProtobufCMessageDescriptor ingress__tag_rule__descriptor;
extern const ProtobufCMessageDescriptor ingress__tag_router__descriptor;
extern const ProtobufCMessageDescriptor ingress__path_router__descriptor;
extern const ProtobufCMessageDescriptor ingress__host_router__descriptor;
extern const ProtobufCMessageDescriptor ingress__appname_router__descriptor;
extern const ProtobufCMessageDescriptor ingress__apirouter__descriptor;
extern const ProtobufCMessageDescriptor ingress__router__descriptor;
extern const ProtobufCMessageDescriptor ingress__timeout__descriptor;
extern const ProtobufCMessageDescriptor ingress__upstream__descriptor;
extern const ProtobufCMessageDescriptor ingress__metadata__descriptor;
extern const ProtobufCMessageDescriptor ingress__virtual_service__descriptor;
extern const ProtobufCMessageDescriptor ingress__config__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ingress_2eproto__INCLUDED */
