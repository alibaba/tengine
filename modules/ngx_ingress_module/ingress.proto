syntax = "proto2";

package Ingress;

enum LocationType {
  LocUnDefined  = 0;    // first element must be zero
  LocHttpHeader = 1;    // Tag from http header
  LocHttpQuery  = 2;    // Tag from http query 
  LocNginxVar   = 3;    // Tag from nginx var 
  LocXBizInfo   = 4;    // Tag from x-biz-info 
  LocHttpCookie = 5;    // Tag from http cookie
}

enum MatchType {
  MatchUnDefined    = 0;    // first element must be zero
  WholeMatch        = 1;    // String matches exactly
  StrListInMatch    = 2;    // String list match
  ModCompare        = 3;    // mod result compare value
}

enum OperatorType {
  OperatorUnDefined     = 0; // first element must be zero
  OperatorEqual         = 1; // equal operation
  OperatorGreater       = 2; // greater operation
  OperatorLess          = 3; // less operation
  OperatorGreaterEqual  = 4; // greater or equal 
  OperatorLessEqual     = 5; // less or equal
}

enum ActionType
{
  ActionUnDefined           = 0;    // first element must be zero
  ActionAddReqHeader        = 1;    // Action add http request header, add action do not care about duplicate
  ActionAppendReqHeader     = 2;    // Action append http request header
  ActionAddRespHeader       = 3;    // Action add http response header
  ActionAppendRespHeader    = 4;    // Action append http response header
  ActionAddParam            = 5;    // Action add http request query param
}

enum ActionValueType
{
  ActionValueUnDefined      = 0;    //first element must be zero
  ActionStaticValue         = 1;    // value from configure
  ActionDynamicValue        = 2;    // value from nginx var
}


message TagValueStrList {
    repeated string value = 1; // string list  
}

message TagItemCondition {
  optional string value_str = 1;            // string match value, for WholeMatch,PrefixMatch,SuffixMatch, and RegMatch
  optional TagValueStrList value_list = 2;  // string list for match, for StrListInMatch
  optional uint64 divisor = 3;              // mode divisor, for ModCompare
  optional uint64 remainder = 4;            // compare remainder, for ModCompare
  optional OperatorType operator = 5;       // >, <, =, >=, <=, for ModCompare
}

message TagItem {
  optional LocationType location = 1;       // which location to get the Tag
  optional string key = 2;                  // The name of the key to be parsed
  optional TagItemCondition condition = 3;  // The name of the value to be parsed
  optional MatchType match_type = 4;        // matching method
}

message TagRule {
  repeated TagItem items = 1;       // 'and' condition
}

message TagRouter {
  optional string service_name = 1;
  repeated TagRule rules = 2;       // 'or' condition
}

message PathRouter {
  optional string prefix = 1;
  optional string service_name = 2;
  repeated TagRouter tags = 3;
}

message HostRouter {
  optional string host = 1;
  optional string service_name = 2;

  repeated PathRouter paths = 3;
  repeated TagRouter tags = 4;
}

message AppnameRouter {
  optional string appname = 1;
  optional string service_name = 2;

  repeated TagRouter tags = 3;
}

message APIRouter {
  optional string service_name = 1;
  optional string api = 2;

  repeated TagRouter tags = 3;
}

message Router
{
  optional HostRouter host_router = 1;

  optional AppnameRouter appname_router = 2;
  optional APIRouter api_router = 3;
}

message Timeout
{
  optional uint32 connect_timeout = 1;
  optional uint32 read_timeout = 2;
  optional uint32 write_timeout = 3;
}

message Upstream
{
  optional string target = 1;
  optional uint32 weight = 2;
}

message Metadata
{
  optional string key = 1;
  optional string value = 2;
}



message Action
{
  optional ActionType action_type = 1;          // action type 
  optional ActionValueType value_type = 2;      // action value type
  optional string key = 3;                      // action key
  optional string value = 4;                    // action value

}

message UnitRedirect
{
  optional string from = 1;
  optional string to = 2;
}
message UnitWeight
{
  optional string unit = 1;
  optional uint32 weight = 2; 
}

message Unit
{
  optional string generic_unit = 1;
  repeated UnitRedirect redirects = 2;
  repeated UnitWeight weights = 3;
}

message VirtualService
{
  optional string service_name = 1;

  repeated Upstream upstreams = 2;

  optional Timeout timeout_ms = 3;
  optional bool force_https = 4;

  repeated Metadata metadata = 5;
  repeated Action   action = 6;
}

message Config
{
  repeated Router routers = 1;
  repeated VirtualService services = 2;
}
