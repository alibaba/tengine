syntax = "proto2";

package Ingress;

enum LocationType {
  LocHttpHeader = 0;    // Tag from http header
  LocHttpQuery = 1;     // Tag from http query (not supported yet)
  LocNginxVar = 2;      // Tag from nginx var (not supported yet)
  LocXBizInfo = 3;      // Tag from x-biz-info (not supported yet)
}

enum MatchType {
  WholeMatch = 0;        // String matches exactly
  PrefixMatch = 1;       // Prefix matching (not supported yet)
  SuffixMatch = 2;       // Suffix matching (not supported yet)
  RegMatch = 3;          // Regex matching (not supported yet)
}

message TagItem {
  optional LocationType location = 1;   // which location to get the Tag
  optional string key = 2;              // The name of the key to be parsed
  optional string value = 3;            // The name of the value to be parsed
  optional MatchType match_type =4;     // matching method
}

message TagRule {
  repeated TagItem items = 1;       // 'and' condition
}

message TagRouter {
  optional string service_name = 1;
  repeated TagRule rules = 2;       // 'or' condition
}

message PathRouter {
  optional string prefix = 1;
  optional string service_name = 2;
  repeated TagRouter tags = 3;
}

message HostRouter {
  optional string host = 1;
  optional string service_name = 2;

  repeated PathRouter paths = 3;
  repeated TagRouter tags = 4;
}

message AppnameRouter {
  optional string appname = 1;
  optional string service_name = 2;

  repeated TagRouter tags = 3;
}

message APIRouter {
  optional string service_name = 1;
  optional string api = 2;

  repeated TagRouter tags = 3;
}

message Router
{
  optional HostRouter host_router = 1;

  optional AppnameRouter appname_router = 2;
  optional APIRouter api_router = 3;
}

message Timeout
{
  optional uint32 connect_timeout = 1;
  optional uint32 read_timeout = 2;
  optional uint32 write_timeout = 3;
}

message Upstream
{
  optional string target = 1;
  optional uint32 weight = 2;
}

message Metadata
{
  optional string key = 1;
  optional string value = 2;
}

message VirtualService
{
  optional string service_name = 1;

  repeated Upstream upstreams = 2;

  optional Timeout timeout_ms = 3;
  optional bool force_https = 4;

  repeated Metadata metadata = 5;
}

message Config
{
  repeated Router routers = 1;
  repeated VirtualService services = 2;
}
